Update 11/9 - When you run the program, you'll have to modify the tracker.txt file that the
requester reads from so that it says the id of the correct mumble machine.  I think an
example of that is committed, but if not basically you change the '-x' to '-#' with the # being 
what mumble machine you are on (basically the hostname of your computer)
----------------------------------------------
HIGH LEVEL DESCRIPTION

Emulator acts as a "network emulator" (router emulator?). The emulator is 
associated with the <host,port> it is run on.  It reads the "static forwarding 
table" file to find what forwarding responsibilities it has. If it's setup right
it should be able to forward to another emulator which forwards and so on.

All packets(R,D,E,A) with encapsulated will be encapsulated before sending from 
either sender or receiver. The new packet looks like this: 
-------------------------------------------------------------------------------...------
|  8 bit   | 32 bit src | 16 bit src | 32 bit dest | 16 bit dest | 32 bit | Old Packet |
| priority | IP address |  port      | IP address  |    port     | length |            |
-------------------------------------------------------------------------------...------

OLD PACKET:
--------------------------------------------...-------
|  8 bit      | 32 bit   | 32 bit  | Variable length |
| packet type | sequence |  length | payload         |
--------------------------------------------...-------

Priority levels are: 0x01-high, 0x02-medium, 0x03-low

Emulator has 4 functions: routing, queueing, send function, log function
  ROUTING: send an incoming onto the next hop if its destination matches a 
           destination found in the forwarding table for this emulator; if not 
           drop the packet and log the event
           
  QUEUEING: Examine the priority of a packet and place in the appropriate queue
            If the queue if full, drop the packet and log the event
            
  SEND: Get packets from the queues, delay them based on the forwarding table, 
        then drop them randomly based on the forwarding table, if not dropped 
        send the packet; if dropped log the event
        
  LOGGING: Write to the log file about an event. Event must include a reason for
           the packet drop, source host name and port, the intended destination 
           host name and port, the time of loss (to millisecond resolution), the
           priority level of the packet, and the size of the payload

New file: EMULATOR.C
emulator -p <port> -q <queue_size> -f <filename> -l <log>
	port: port of the emulator
	queue_size: size of each of the queues
	filename: name of the file where we find the forwarding table
	log: name of the log file

SENDER.C
sender -p <port> -g <requester port> -r <rate> -q <seq_no> -l <length>
       -f <f_hostname> -h <f_port> -i <priority> -t <timeout> 
  f_hostname: host name of the emulator
  f_port: port of the new emulator
  priority: priority of sent packets
  timeout: timeout for retransmition of lost packets (in ms)
Modifications:
  1) Always start at sequence number 1
  2) Increment the sequence number by 1 for each packet (insted of pkt length)
  3) Print out observed percentage of packets lost -The loss rate that the 
     sender prints out is not necessarily the same as the loss rate that we 
     identify in the forwarding table since the sender might miss some ACKs. 
     This loss rate is computed based on number of retransmissions divided by 
     total number of transmissions (normal + retransmission)
     
  1) Wait for ACK for each packet after sending a "window" of packets
      -If not all ACKs received with "timeout", resend packets without an ACK
  2) END packet priority is the same as all others in the flow
     
REQUESTER.C
requester -p <port> -f <f_hostname> -h <f_port> -o <file option> -w <window>
  f_hostname: same as above
  f_port: same as above
  window: requester's size window
Modifications:
  1) Verify that the destination IP address in the packet is indeed its own IP
  2) Suppress display of individual DATA packet information
  
  1) Advertise the "window size" to the sender with the request packet
  2) Send ACKs back to the sender for each packet
      -ACK have a sequence number = sequence number of the packet being ACK'ed 
  3) All packets sent have priority 1

--------------------------------------------------------------------------------
EMULATOR ROUTINE (according to web page)
Program can simply follow the steps below in an infinite loop and no threading 
is required for this assignment.

1. Receive packet from network in a non-blocking way. This means that you should
   not wait/get blocked in the recvfrom function until you get a packet. Check 
   if you have received a packet; If not jump to 4.

2. Once you receive a packet, decide whether packet is to be forwarded by 
   consulting the forwarding table.

3. Queue packet according to packet priority level if the queue is not full,

4. If a packet is currently being delayed and the delay has not expired, goto 
   Step 1.

5. If no packet is currently being delayed, select the packet at the front of 
   the queue with highest priority, remove that packet from the queue and delay 
   it.

6. When the delay expires, randomly determine whether to drop the packet.

7. Otherwise, send the packet to the proper next hop.

8. Goto Step 1.

--------------------------------------------------------------------------------
REQUESTER-SENDER PROCEDURE (according to web page)
1) Upon receipt of a request packet, the sender sends a full window of packets 
   at the rate specified by the user.
   
2) The sender keeps this set of data in a buffer, and keeps a timeout for each 
   of the packets. If it does not receive an ack for a packet and its timeout 
   expires, it will retransmit that packet. The timeout is fixed and is specified
   by the one of the sender's parameters.
   
3) If an ack is not received after re-transmitting the packet 5 times, the 
   sender will print an error stating that it gave up on the packet with that 
   specific sequence number, and continue with the next packets.
   
4) Once all packets of that window have been acked the sender sends another 
   window of packets.
   
5) The requester should have a buffer and make sure that it prints the data in 
   the file in the order of the packets' sequence numbers. It should also make 
   sure that it does not print duplicate packets into the file.
   
6) The requester acks every packet that it receives, even if it has already 
   written that packet to the file. 

